# Configuration file
# key = value

# Configuration file
# key = value

# Build

#quarkus.container-image.build=true
#quarkus.container-image.push=true
#quarkus.native.container-build=true
#quarkus.jib.base-native-image=quay.io/quarkus/ubi-quarkus-native-image:20.0.0-java11
#quarkus.container-image.group=jeremydavis
#quarkus.container-image.name=quarkus-cafe-core
#quarkus.container-image.tag=0.3

# HTTP Port
quarkus.http.port=8081

# Logging
#quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.format=%-5p [%c{2.}] (%t) %s%e%n
quarkus.log.level=INFO
quarkus.log.category."io.quarkuscoffeeshop".level=WARN
quarkus.log.category."io.quarkuscoffeeshop.counter.domain.Order".level=DEBUG
quarkus.log.category."io.quarkuscoffeeshop.infrastructure.KafkaService".level=DEBUG
quarkus.log.category."org.apache.kafka".level=FATAL
quarkus.log.category."org.testcontainers".level=FATAL

# Datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/coffeeshopdb?currentSchema=coffeeshop
quarkus.datasource.jdbc.max-size=16
quarkus.datasource.username=coffeeshopuser
quarkus.datasource.password=redhat-20
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.database.generation=drop-and-create

# Datasource
%dev.quarkus.mongodb.database = coffeeshopdb
%dev.quarkus.mongodb.connection-string = mongodb://admin:redhat-20@localhost:27017/coffeeshopdb?authSource=admin
%dev.quarkus.log.category."io.quarkus.mongodb.panache.runtime".level=DEBUG

%test.quarkus.mongodb.database = coffeeshopdb
%test.quarkus.mongodb.connection-string = mongodb://coffeeshop-user:redhat-20@localhost:27017/coffeeshopdb

%prod.quarkus.mongodb.database = ${MONGO_DB}
%prod.quarkus.mongodb.connection-string = ${MONGO_URL}
%prod.quarkus.mongodb."mongo-client-configs".tls=true
%prod.quarkus.mongodb.credentials.username=${MONGO_USERNAME}
%prod.quarkus.mongodb.credentials.password=${MONGO_PASSWORD}

# Kafka/Reactive Messaging

### Incoming

#### Order Events
%dev.mp.messaging.incoming.order-events.connector=smallrye-kafka
%dev.mp.messaging.incoming.order-events.bootstrap.servers=localhost:9092
%dev.mp.messaging.incoming.order-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.order-events.topic=orders

%test.mp.messaging.incoming.order-events.connector=smallrye-kafka
%test.mp.messaging.incoming.order-events.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.incoming.order-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%test.mp.messaging.incoming.order-events.topic=orders

%prod.mp.messaging.incoming.order-events.connector=smallrye-kafka
%prod.mp.messaging.incoming.order-events.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.incoming.order-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.order-events.topic=orders

#### Orders incoming
%dev.mp.messaging.incoming.orders.connector=smallrye-kafka
%dev.mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.orders.topic=orders

%test.mp.messaging.incoming.orders.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.incoming.orders.connector=smallrye-kafka
%test.mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%test.mp.messaging.incoming.orders.topic=orders

%prod.mp.messaging.incoming.orders.connector=smallrye-kafka
%prod.mp.messaging.incoming.orders.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%prod.mp.messaging.incoming.orders.topic=orders

### Outgoing

#### Orders
%dev.mp.messaging.outgoing.orders-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.orders-out.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.orders-out.topic=orders

%test.mp.messaging.outgoing.orders-out.connector=smallrye-kafka
%test.mp.messaging.outgoing.orders-out.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%test.mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.orders-out.topic=orders-test
%test.mp.messaging.outgoing.orders-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}

%prod.mp.messaging.outgoing.orders-out.connector=smallrye-kafka
%prod.mp.messaging.outgoing.orders-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.orders-out.topic=orders

#### Barista
%dev.mp.messaging.outgoing.barista-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.barista-out.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.barista-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.barista-out.topic=orders
%dev.mp.messaging.outgoing.barista-out.group.id=core-group

%test.mp.messaging.outgoing.barista-out.connector=smallrye-kafka
%test.mp.messaging.outgoing.barista-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.outgoing.barista-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.barista-out.topic=orders
%test.mp.messaging.outgoing.barista-out.group.id=core-group

%prod.mp.messaging.outgoing.barista-out.connector=smallrye-kafka
%prod.mp.messaging.outgoing.barista-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.outgoing.barista-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.barista-out.topic=orders
%prod.mp.messaging.outgoing.barista-out.group.id=core-group

#### Kitchen
%dev.mp.messaging.outgoing.kitchen-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kitchen-out.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.kitchen-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.kitchen-out.topic=orders

%test.mp.messaging.outgoing.kitchen-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.outgoing.kitchen-out.connector=smallrye-kafka
%test.mp.messaging.outgoing.kitchen-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.kitchen-out.topic=orders

%prod.mp.messaging.outgoing.kitchen-out.connector=smallrye-kafka
%prod.mp.messaging.outgoing.kitchen-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.outgoing.kitchen-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.kitchen-out.topic=orders

# There are 2 configurations for the outgoing web-updates topic to handle the 2 different consumers
#### Web Updates

%dev.mp.messaging.outgoing.web-updates-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.web-updates-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.web-updates-out.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.web-updates-out.topic=web-updates

%test.mp.messaging.outgoing.web-updates-out.connector=smallrye-kafka
%test.mp.messaging.outgoing.web-updates-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.web-updates-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.outgoing.web-updates-out.topic=web-updates

%prod.mp.messaging.outgoing.web-updates-out.connector=smallrye-kafka
%prod.mp.messaging.outgoing.web-updates-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.web-updates-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.outgoing.web-updates-out.topic=web-updates

#### Web Out
%dev.mp.messaging.outgoing.web-updates-order-up.connector=smallrye-kafka
%dev.mp.messaging.outgoing.web-updates-order-up.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.web-updates-order-up.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.web-updates-order-up.topic=web-updates

%test.mp.messaging.outgoing.web-updates-order-up.connector=smallrye-kafka
%test.mp.messaging.outgoing.web-updates-order-up.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%test.mp.messaging.outgoing.web-updates-order-up.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%test.mp.messaging.outgoing.web-updates-order-up.topic=web-updates

%prod.mp.messaging.outgoing.web-updates-order-up.connector=smallrye-kafka
%prod.mp.messaging.outgoing.web-updates-order-up.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%prod.mp.messaging.outgoing.web-updates-order-up.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%prod.mp.messaging.outgoing.web-updates-order-up.topic=web-updates

#Debezium
# Available configuration properties that can be tweaked
# Buildtime configuration:
# quarkus.debezium-outbox.table-name=OUTBOX_EVENTS
# quarkus.debezium-outbox.id.name=ID
# quarkus.debezium-outbox.id.column-definition=UUID NOT NULL
# quarkus.debezium-outbox.aggregate-id.name=AGGREGATE_ID
# quarkus.debezium-outbox.aggregate-id.column-definition=VARCHAR(50) NOT NULL
# quarkus.debezium-outbox.aggregate-id.converter=com.company.AggregateIdConverter
# quarkus.debezium-outbox.aggregate-type.name=AGGREGATE_TYPE
# quarkus.debezium-outbox.aggregate-type.column-definition=VARCHAR(75) NOT NULL
# quarkus.debezium-outbox.aggregate-type.converter=com.company.AggregateTypeConverter
# quarkus.debezium-outbox.type.name=TYPE
# quarkus.debezium-outbox.type.column-definition=VARCHAR(50) NOT NULL
# quarkus.debezium-outbox.type.converter=com.company.TypeConverter
# quarkus.debezium-outbox.timestamp.name=TIMESTAMP
# quarkus.debezium-outbox.timestamp.column-definition=TIMESTAMP NOT NULL
# quarkus.debezium-outbox.timestamp.converter=com.company.TimestampConverter
# quarkus.debezium-outbox.payload.name=JSON
# quarkus.debezium-outbox.payload.column-definition=JSONB
# quarkus.debezium-outbox.payload.converter=com.company.JsonbConverter

# Runtime configuration:
# quarkus.debezium-outbox.remove-after-insert=false
